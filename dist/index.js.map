{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://javascript-action/../../../../../../../usr/local/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://javascript-action/external node-commonjs \"os\"","../webpack://javascript-action/external node-commonjs \"path\"","../webpack://javascript-action/webpack/bootstrap","../webpack://javascript-action/webpack/runtime/compat","../webpack://javascript-action/./index.js"],"sourcesContent":[null,"module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require('@actions/core');\nconst exec = require('@actions/exec');\nconst schema = require(\"./schema.json\")\nconst os = require('os')\nconst path = require('path')\n\n// most @actions toolkit packages have async methods\nasync function run() {\n  try {\n\n    const homedir = os.homedir()  \n    const arkadePath = path.join(homedir, \"/.arkade/bin/\")\n\n    core.info(\"Setting arkade's folder to: \" + arkadePath)\n    // Add arkade's path to the PATH environment variable\n    core.addPath(arkadePath)\n\n    let added = 0\n    for(i = 0; i < schema.length; i++){\n      let tool = schema[i]\n      // inputName = tool.replace(/-/g, \"_\")\n      let inputName = tool;\n      let toolValue = core.getInput(inputName);\n\n\n      if(toolValue && toolValue.length) {\n        core.info(\"Installing: \" + tool + \" with \" + toolValue)\n\n        if(toolValue == \"latest\") {\n          await exec.exec('arkade get --progress=false --quiet=true ' + tool)\n        } else {\n          await exec.exec('arkade get --progress=false --quiet=true ' + tool + ' --version ' + toolValue)\n        }\n\n        added++\n      }\n    }\n\n    core.info(\"If you ðŸ’™ arkade, sponsor alexellis on GitHub https://github.com/sponsors/alexellis\")\n\n    core.setOutput('tools', added+ \" tools were installed\");\n\n  } catch (error) {\n    core.setFailed(error.message);\n  }\n}\n\nrun();\n"],"names":[],"sourceRoot":""}